---
import DefaultLayout from "src/layouts/defaultLayout.astro";
import ArtistInfo from '$lib/components/artistInfo.svelte';
import AlbumInfoList from "$lib/components/albumInfoList.svelte";
import Artists from '$lib/data/Artist.json';
import { sortAlbums, sortSongs } from '$lib/sorts';
import type { Artist, Album, Song } from "$lib/typeDefs";
export function getStaticPaths() {
  return [
    { params: { artistId: 425209960 } },
    { params: { artistId: 390853789 } },
    { params: { artistId: 421186855 } },
    { params: { artistId: 449513466 } },
  ]
};
  const { artistId } = Astro.params;
  const incompleteArtist = Artists.find((artist) => artist.artistId === Number(artistId));
  const albumResponse = await fetch(`https://itunes.apple.com/lookup?id=${artistId}&entity=album`);
  const albumData = await albumResponse.json();
  const songResponse = await fetch(`https://itunes.apple.com/lookup?id=${artistId}&entity=song&limit=500`);
  const songData = await songResponse.json();
  const artist: Artist = {
    artistId: 0,
    artistName: "",
    bio: "",
    photo: "",
    founded: 0,
    hometown: "",
    members: "",
    albums: [],
    ...incompleteArtist,
  }
  artist.albums = sortAlbums(albumData.results.filter((album: Album) => album.collectionId));
  songData.results
    .filter((result: Song) => result.collectionId)
    .forEach((song: Song) => {
      delete song.trackPrice;
      const albumForSongIndex = Array.from(
      artist.albums.map((album: Album) => album.collectionId)
      ).indexOf(song.collectionId);
      if (albumForSongIndex >= 0) {
        if (artist.albums[albumForSongIndex].songs)
        artist.albums[albumForSongIndex].songs.push(song);
        else artist.albums[albumForSongIndex].songs = [song];
      }
    });
    artist.albums.forEach((album: Album, index: number) => {
    // Use this to obtain the values for the album getStaticPaths() function
    // console.log({ params: { artistId: artist.artistId, albumId: album.collectionId } })
    const { songs } = album;
    delete album.collectionPrice;
    artist.albums[index].songs = sortSongs(songs);
  });
---

<DefaultLayout title={`${artist.artistName} | Ausick`}>
  <div class="w-full flex border-white border-2 border-t-0 pt-5">
    <ArtistInfo artist={artist} showBio={true} />
    <AlbumInfoList artist={artist} />
  </div>
</DefaultLayout>
